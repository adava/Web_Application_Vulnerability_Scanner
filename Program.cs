using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Text.RegularExpressions;
using HttpWebRequestExecutor.Interfaces;
using HttpWebRequestExecutor.Factories;
using System.Net;
using HttpParser.Models;
using System.Xml;

namespace MicroFocus_Scanner
{
    class Program
    {
        private static IHttpWebRequestFactory factory;
        static void Main(string[] args)
        {
            string file_path;
            string errors_path;
            string param_pholder;
            if (args.Length >= 1)
            {
                file_path = args[0];
            }
            else
            {
                file_path = "C:\\Users\\IEUser\\Desktop\\req_blab.txt";
                Console.WriteLine("No request file was provided; will use the development values! " + file_path);
            }

            if (args.Length >= 2)
            {
                param_pholder = args[1];
            }
            else
            {
                param_pholder = "\\$\\w+\\$";
                Console.WriteLine("No request file was provided; will use the development values! " + param_pholder);
            }

            string text = System.IO.File.ReadAllText(@file_path);
            //Console.Write(text);
            factory = new HttpWebRequestFactory();
            Request req = new Request(text, factory, param_pholder);

            IGenPayload xssPayloadGenerator = new XSSPayloadGenerator();
            IErrorLoader xssErrorLoader = new XSSErrors(xssPayloadGenerator.GeneratePayload());
            Request req2 = new Request(text, factory, param_pholder);
            IAttack xssAttack = new Attack("XSS Injection", xssPayloadGenerator, req2, xssErrorLoader);
            string res_msg2 = xssAttack.run_attack();
            Console.WriteLine(res_msg2);

            XmlDocument XDoc = null;
            IErrorLoader sqlXMLLoader = null;
            if (args.Length < 3)
            {
                XDoc = new XmlDocument();
                XDoc.LoadXml(Resources.MSSQL_Errors);
                sqlXMLLoader = new XmlErrorLoader(XDoc, "checks");
            }
            else
            {
                errors_path = args[2];
                sqlXMLLoader = new XmlErrorLoader(errors_path, "checks");
            }

            IGenPayload sqlPGenerator = new SQLIPayload();
            IAttack sqlAttack = new Attack("SQL Injection", sqlPGenerator, req, sqlXMLLoader);
            string res_msg = sqlAttack.run_attack();
            Console.WriteLine(res_msg);

        }

        static async Task run_transport(String text)
        {
            Transport tcp_t = new Transport("http://10.0.2.15/Hackathon/Account/Login.aspx");
            await tcp_t.ConnectAsync(text);
        }

    }
}
